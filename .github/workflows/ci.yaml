name: CI Pipeline with Versioning and Docker Deployment

on:
  push:
    branches:
      - main
      - dev
      - feature/*
  pull_request:
    branches:
      - main
      - dev
      - feature/*

jobs:
  calculate-version:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        token: ${{ secrets.PAT_GITHUB }}

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Calculate version
      id: version
      run: |
        VERSION_FILE=VERSION
        if [ ! -f "$VERSION_FILE" ]; then echo "0.0.0" > $VERSION_FILE; fi
        CURRENT_VERSION=$(cat $VERSION_FILE)
        echo "Current version: $CURRENT_VERSION"
        
        BRANCH_NAME=${GITHUB_REF#refs/heads/}
        echo "Branch name: $BRANCH_NAME"

        MAJOR=$(echo $CURRENT_VERSION | cut -d. -f1)
        MINOR=$(echo $CURRENT_VERSION | cut -d. -f2)
        PATCH=$(echo $CURRENT_VERSION | cut -d. -f3)

        if [[ "$BRANCH_NAME" == "main" ]]; then
          MAJOR=$((MAJOR + 1))
          MINOR=0
          PATCH=0
        elif [[ "$BRANCH_NAME" == "dev" ]]; then
          MINOR=$((MINOR + 1))
          PATCH=0
        elif [[ "$BRANCH_NAME" == feature/* ]]; then
          PATCH=$((PATCH + 1))
        fi

        NEW_VERSION="$MAJOR.$MINOR.$PATCH"
        echo "New version: $NEW_VERSION"
        echo $NEW_VERSION > $VERSION_FILE
        echo "::set-output name=version::$NEW_VERSION"

    outputs:
      version: ${{ steps.version.outputs.version }}

  build-push-docker:
    runs-on: ubuntu-latest
    needs: calculate-version

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        token: ${{ secrets.PAT_GITHUB }}

    - name: Checkout code
      uses: actions/checkout@v2
      with:
        token: ${{ secrets.PAT_GITHUB }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Push Docker image
      env:
        VERSION: ${{ needs.calculate-version.outputs.version }}
        DOCKER_REPOSITORY: ${{ vars.DOCKER_REPOSITORY }}
      run: |
        echo "Pushing Docker image to repository: $DOCKER_REPOSITORY:$VERSION"
        docker build -t $DOCKER_REPOSITORY:$VERSION .
        docker push $DOCKER_REPOSITORY:$VERSION

  tag-repo:
    runs-on: ubuntu-latest
    needs: calculate-version

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        token: ${{ secrets.PAT_GITHUB }}

    - name: Configure Git
      run: |
        git config --global user.name 'github-actions'
        git config --global user.email 'github-actions@github.com'

    - name: Check if tag exists
      id: check_tag
      run: |
        TAG_EXISTS=$(git ls-remote --tags origin | grep "refs/tags/v${{ needs.calculate-version.outputs.version }}$")
        if [ -n "$TAG_EXISTS" ]; then
          echo "Tag v${{ needs.calculate-version.outputs.version }} already exists."
          echo "::set-output name=tag_exists::true"
        else
          echo "::set-output name=tag_exists::false"
        fi

    - name: Tag version
      if: steps.check_tag.outputs.tag_exists == 'false'
      env:
        VERSION: ${{ needs.calculate-version.outputs.version }}
        PAT_GITHUB: ${{ secrets.PAT_GITHUB }}
      run: |
        echo "Tagging version: $VERSION"
        git tag -a v$VERSION -m "Release version $VERSION"
        git push https://$PAT_GITHUB@github.com/npua-proj/Source.git --tags
  
  deploy:
    runs-on: ubuntu-latest
    needs: push-docker

    steps:
    - name: Install SSH Client
      run: |
        sudo apt-get update
        sudo apt-get install -y openssh-client

    - name: Deploy to EC2
      env:
        VERSION: ${{ needs.calculate-version.outputs.version }}
        DOCKER_REPOSITORY: ${{ secrets.DOCKER_REPOSITORY }}
        EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
        EC2_USER: ${{ secrets.EC2_USER }}
        EC2_HOST: ${{ secrets.EC2_HOST }}
      run: |
        echo "$EC2_SSH_KEY" > ec2_key.pem
        chmod 600 ec2_key.pem
        ssh -o StrictHostKeyChecking=no -i ec2_key.pem $EC2_USER@$EC2_HOST << EOF
          echo "Stopping current Docker container..."
          docker stop podcaster || true
          docker rm my_container || true
          echo "Pulling new Docker image..."
          docker pull $DOCKER_REPOSITORY:$VERSION
          echo "Starting new Docker container..."
          docker run -d --name podcaster -p 80:80 $DOCKER_REPOSITORY:$VERSION
        EOF