name: CI Pipeline with Versioning and Docker Deployment

on:
  push:
    branches:
      - main
      - dev
      - feature/*
  pull_request:
    branches:
      - main
      - dev
      - feature/*

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip

    - name: Calculate version
      id: version
      run: |
        VERSION_FILE=VERSION
        if [ ! -f "$VERSION_FILE" ]; then echo "0.0.0" > $VERSION_FILE; fi
        CURRENT_VERSION=$(cat $VERSION_FILE)
        echo "Current version: $CURRENT_VERSION"
        
        BRANCH_NAME=${GITHUB_REF#refs/heads/}
        echo "Branch name: $BRANCH_NAME"

        MAJOR=$(echo $CURRENT_VERSION | cut -d. -f1)
        MINOR=$(echo $CURRENT_VERSION | cut -d. -f2)
        PATCH=$(echo $CURRENT_VERSION | cut -d. -f3)

        if [[ "$BRANCH_NAME" == "main" ]]; then
          MAJOR=$((MAJOR + 1))
          MINOR=0
          PATCH=0
        elif [[ "$BRANCH_NAME" == "dev" ]]; then
          MINOR=$((MINOR + 1))
          PATCH=0
        elif [[ "$BRANCH_NAME" == feature/* ]]; then
          PATCH=$((PATCH + 1))
        fi

        NEW_VERSION="$MAJOR.$MINOR.$PATCH"
        echo "New version: $NEW_VERSION"
        echo $NEW_VERSION > $VERSION_FILE
        echo "::set-output name=version::$NEW_VERSION"

    - name: Build and push Docker image
      env:
        VERSION: ${{ steps.version.outputs.version }}
        DOCKER_REPOSITORY: ${{ secrets.DOCKER_REPOSITORY }}
      run: |
        docker build -t $DOCKER_REPOSITORY:$VERSION .
        docker push $DOCKER_REPOSITORY:$VERSION

    - name: Push version tag to GitHub
      env:
        VERSION: ${{ steps.version.outputs.version }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git config --global user.name 'github-actions'
        git config --global user.email 'github-actions@github.com'
        git tag -a v$VERSION -m "Release version $VERSION"
        git push --tags
